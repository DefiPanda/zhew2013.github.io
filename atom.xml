<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[418 I'm a teapot]]></title>
  <link href="http://jw2013.github.io/atom.xml" rel="self"/>
  <link href="http://jw2013.github.io/"/>
  <updated>2014-07-26T21:37:33-07:00</updated>
  <id>http://jw2013.github.io/</id>
  <author>
    <name><![CDATA[jw2013]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Multiple Assignment Is a Puzzle]]></title>
    <link href="http://jw2013.github.io/blog/2014/07/26/python-multiple-assignment-is-a-puzzle/"/>
    <updated>2014-07-26T19:12:16-07:00</updated>
    <id>http://jw2013.github.io/blog/2014/07/26/python-multiple-assignment-is-a-puzzle</id>
    <content type="html"><![CDATA[<p>This afternoon I was working on a coding challenge on an online judge for finding the first missing positive from an array. For example, the first missing positive of [4,2,5,7,1] is 3. The problem is pretty straightford and solvable in O(n) time and O(1) space. So without much thought I wrote out the first iteration of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def firstMissingPositive(A):
</span><span class='line'>    i = 0
</span><span class='line'>    while i &lt; len(A):
</span><span class='line'>        if A[i] &gt; 0 and A[i] - 1 &lt; len(A) and A[A[i] - 1] != A[i]:
</span><span class='line'>            A[i], A[A[i] - 1] = A[A[i] - 1], A[i]
</span><span class='line'>        else:
</span><span class='line'>            i += 1
</span><span class='line'>    for i in range(len(A)):
</span><span class='line'>        if A[i] != i + 1:
</span><span class='line'>            return i + 1
</span><span class='line'>    return len(A) + 1</span></code></pre></td></tr></table></div></figure>


<p>To my surprise, the above code runs forever for input [2,1]. I did a bit debugging and found out <code>A[i], A[A[i] - 1] = A[A[i] - 1], A[i]</code> never swap the value correctly. That line is supposed to make <code>[2,1]</code> into <code>[1,2]</code> in the first iteration of while loop. But instead, after execution of that line the array <code>A</code> is still <code>[1,2]</code>.</p>

<p>Totally puzzled, I change <code>A[i], A[A[i] - 1] = A[A[i] - 1], A[i]</code> into <code>A[A[i] - 1], A[i] = A[i], A[A[i] - 1]</code> instead. Guess what? The modified code passed all test cases.</p>

<p>Unbelieved by the result, I am so intrigued and dicided to find out why.</p>

<p>So I first write a simple function as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This one will fail
</span><span class='line'>def test1():
</span><span class='line'>    A = [2,1]
</span><span class='line'>    A[0], A[A[0] - 1] = A[A[0] - 1], A[0]
</span><span class='line'>    return A</span></code></pre></td></tr></table></div></figure>


<p>CPython has a disassembler library to turn Python bytecode into human readable strings (<a href="https://docs.python.org/2/library/dis.html">https://docs.python.org/2/library/dis.html</a>). So I use that to transform the bytecode of above code to following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  0 LOAD_CONST               1 (2)
</span><span class='line'>  3 LOAD_CONST               2 (1)
</span><span class='line'>  6 BUILD_LIST               2
</span><span class='line'>  9 STORE_FAST               0 (A)   # A = [2, 1]
</span><span class='line'>
</span><span class='line'> 12 LOAD_FAST                0 (A)
</span><span class='line'> 15 LOAD_FAST                0 (A)
</span><span class='line'> 18 LOAD_CONST               3 (0)
</span><span class='line'> 21 BINARY_SUBSCR       
</span><span class='line'> 22 LOAD_CONST               2 (1)
</span><span class='line'> 25 BINARY_SUBTRACT     
</span><span class='line'> 26 BINARY_SUBSCR                    # A[A[0] - 1]
</span><span class='line'> 27 LOAD_FAST                0 (A)
</span><span class='line'> 30 LOAD_CONST               3 (0)
</span><span class='line'> 33 BINARY_SUBSCR                    # A[0]
</span><span class='line'> 34 ROT_TWO                          # Swap top two stack elements, 
</span><span class='line'>                                     # now 1 (A[A[0] - 1] = A[2 - 1] = 1) is at top, 
</span><span class='line'>                                     # and 2 (A[0] = 2) is at the second of top
</span><span class='line'> 35 LOAD_FAST                0 (A)
</span><span class='line'> 38 LOAD_CONST               3 (0)
</span><span class='line'> 41 STORE_SUBSCR                     # Store top stack element 1 to A[0], 
</span><span class='line'>                                     # now A = [1, 1], and 1 is removed 
</span><span class='line'>                                     # from stack and 2 is at the top of stack
</span><span class='line'> 42 LOAD_FAST                0 (A)
</span><span class='line'> 45 LOAD_FAST                0 (A)
</span><span class='line'> 48 LOAD_CONST               3 (0)
</span><span class='line'> 51 BINARY_SUBSCR                    # Load A[0], notice now A[0] == 1
</span><span class='line'> 52 LOAD_CONST               2 (1)
</span><span class='line'> 55 BINARY_SUBTRACT                  # Load A[A[0] - 1] = A[1 - 1] = A[0]
</span><span class='line'> 56 STORE_SUBSCR                     # Store top stack element 2 to A[0], 
</span><span class='line'>                                     # now A = [2, 1]. We are resetting A[0] back to 2!
</span><span class='line'>
</span><span class='line'> 57 LOAD_FAST                0 (A)
</span><span class='line'> 60 RETURN_VALUE                     # Return A</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The key insight on what&rsquo;s going on inside <code>A[0], A[A[0] - 1] = A[A[0] - 1], A[0]</code> is the indices on the left side (<code>0</code> of <code>A[0]</code> and <code>A[0] - 1</code> of <code>A[A[0] - 1]</code>) is evaluated NOT before the assignment of the value, but in the process of multiple assignment. We eval the right-hand side values first (<code>A[A[0] - 1]</code> => 1, <code>A[0]</code> = 2), then swap the top 2 elements in stack, assign the evaluated values stored in the stack (2 on top with 1 belows it) to the left-hand variables, from left to right. So A[0] on left is expectedly assigned to 1. But <code>A[A[0] - 1]</code> is equal to <code>A[1 - 1]</code> = <code>A[0]</code> now, so instead of assigning 2 to <code>A[1]</code>, we assign it to <code>A[0]</code>.</p>

<p>Notice if all left-hand side incides are evaluated before multiple assignment, <code>A[A[0] - 1]</code> will always be the same as <code>A[2 - 1]</code> = <code>A[1]</code> in the multiple assignment process, and we will get the desired result.</p>

<p>So how to solve this problem? Easy, if we don&rsquo;t want the later read index to be written upon first, we can just make a copy of index first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Success! If we assign index to a variable
</span><span class='line'>def test2():
</span><span class='line'>    A = [2,1]
</span><span class='line'>    x = A[0] - 1
</span><span class='line'>    A[0], A[x] = A[x], A[0]
</span><span class='line'>    return A</span></code></pre></td></tr></table></div></figure>


<p>Or, if one index depend on a value that can possibly be changed through the multiple assignment process, just assign the dependent value (<code>A[A[0] - 1]</code>) first before the assignment of the value it depends on (<code>A[0]</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Also suceeded if we change the swapping order
</span><span class='line'>def test3():
</span><span class='line'>    A = [2,1]
</span><span class='line'>    A[A[0] - 1], A[0] = A[0], A[A[0] - 1]
</span><span class='line'>    return A</span></code></pre></td></tr></table></div></figure>


<p>Sometimes the language implementation of variable evaluation order is not in the way you expected, but it is quite an interesting lesson at least for me to learn.</p>

<p>Discuss it on Hacker <a href="News:">News:</a>
<a href="https://news.ycombinator.com/item?id=8091943">https://news.ycombinator.com/item?id=8091943</a></p>
]]></content>
  </entry>
  
</feed>
